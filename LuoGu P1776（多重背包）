题目描述
终于，破解了千年的难题。小 F 找到了王室的宝物室，里面堆满了无数价值连城的宝物。

这下小 F 可发财了，嘎嘎。但是这里的宝物实在是太多了，小 F 的采集车似乎装不下那么多宝物。看来小 F 只能含泪舍弃其中的一部分宝物了。

小 F 对洞穴里的宝物进行了整理，他发现每样宝物都有一件或者多件。他粗略估算了下每样宝物的价值，之后开始了宝物筛选工作：小 F 有一个最
大载重为 WW 的采集车，洞穴里总共有 n 种宝物，每种宝物的价值为 v_i，重量为 w_i，每种宝物有 m_i件。小 F 希望在采集车不超载的前提下，
选择一些宝物装进采集车，使得它们的价值和最大。

输入格式
第一行为一个整数 nn 和 WW，分别表示宝物种数和采集车的最大载重。

接下来 nn 行每行三个整数 v_i,w_i,m_i

输出格式
输出仅一个整数，表示在采集车不超载的情况下收集的宝物的最大价值。

输入输出样例

4 20
3 9 3
5 9 1
9 4 2
8 1 3


47








#include <iostream>
#include <vector>
using namespace std;
#define INF  1000000000
struct node
{
    int v,w,m;
};
int main()
{
    int n,W;
    cin>>n>>W;
    vector<node> treasure(n);
    vector<int> dp(W+1,-INF);
    dp[0] = 0;
    for(int i=0;i<n;i++)    cin>>treasure[i].v>>treasure[i].w>>treasure[i].m;
    for(int i=0;i<n;i++)
    {
        int num = min(treasure[i].m,W/treasure[i].w);
        for(int k=1;num>0;k<<=1)
        {
            if(k>num) k=num;
            num-=k;
            for(int j=W;j>=treasure[i].w*k;j--)
                dp[j] = max(dp[j],dp[j-treasure[i].w*k]+treasure[i].v*k);
        }
    }
    int maxd = dp[0];
    for(int i=0;i<=W;i++)   maxd = max(maxd,dp[i]);
    cout<<maxd<<endl;
    return 0;
}
